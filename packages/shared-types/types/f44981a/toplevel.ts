/* eslint-disable */
/**
 * This file was automatically generated by mdm-docs-parser.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run mdm-docs-parser:generate to regenerate this file.
 */

export interface TopLevel {
  /**
   * The reverse-DNS style identifier ('com.example.myprofile', for example) that identifies the profile. This string is used to determine whether a new profile should replace an existing one or should be added.
   */
  PayloadIdentifier: string;
  /**
   * The globally unique identifier for the profile. The actual content is unimportant. In macOS, you can use 'uuidgen' to generate reasonable UUIDs.
   */
  PayloadUUID: string;
  /**
   * The type of payload. The only supported value is 'Configuration'.
   */
  PayloadType: "Configuration";
  /**
   * The version number of the profile format. This number represents the version of the configuration profile as a whole, not of the individual profiles within it. The value should be 1.
   */
  PayloadVersion: 1;
  /**
   * Set to 'true' if the profile is encrypted.
   */
  IsEncrypted?: boolean;
  /**
   * The array of payload dictionaries. If 'IsEncrypted' is 'true', this array isn't needed.
   */
  PayloadContent: {
    /**
     * A payload item as defined by each payload type.
     */
    ANY: string;
  }[];
  /**
   * Enabled if 'IsEncrypted' is 'true'.
   */
  EncryptedPayloadContent?: string;
  /**
   * The description of the profile, shown on the Detail screen for the profile. This description should be detailed enough to help the user decide whether to install the profile.
   */
  PayloadDescription?: string;
  /**
   * The human-readable name for the profile. This value is displayed on the Detail screen. It doesn't have to be unique.
   */
  PayloadDisplayName?: string;
  /**
   * Set to 'true' if there is a removal passcode.
   */
  HasRemovalPasscode?: boolean;
  /**
   * The human-readable string containing the name of the organization that provided the profile.
   */
  PayloadOrganization?: string;
  /**
   * If present and set to 'true', the user can't delete the profile (unless the profile has a removal password and the user provides it).
   * On macOS, as of 10.15, this key only affects removal of manually installed profiles. If set to 'true' and no profile removal payload is present, removing the profile requires admin auth.
   * On macOS versions prior to 10.15, this key would prevent admins from removing MDM installed profiles but as of macOS 10.15, users can never remove MDM profiles, not even the admin.
   * Requires a supervised device.
   */
  PayloadRemovalDisallowed?: boolean;
  /**
   * A string that defines whether the profile should be installed for the system or the user. In many cases, it determines the location of certificate items, such as keychains. Though it isn't possible to declare different payload scopes, payloads, like VPN, may automatically install their items in both scopes, if needed.
   */
  PayloadScope?: "System" | "User";
  /**
   * The date when the profile is automatically removed.
   */
  RemovalDate?: string;
  /**
   * The number of seconds until the profile is automatically removed. If the 'RemovalDate' key is present, whichever field yields the earliest date is used.
   */
  DurationUntilRemoval?: number;
  /**
   * The date when a profile is no longer valid and an update button is presented to the user.
   */
  PayloadExpirationDate?: string;
  /**
   * The type of platform of the target device. Specifying the platform type helps prevent unintended installations.
   * For interactive installations on iOS devices, specifying a target platform avoids the interstitial alerts that prompt the user to choose a profile target when multiple targets are eligible.
   * 0 = Any/unspecified
   * 1 = iPhone/iPad/iPod Touch
   * 2 = Apple Watch
   * 3 = HomePod
   * 4 = Apple TV
   * 5 = Mac
   */
  TargetDeviceType?: 0 | 1 | 2 | 3 | 4 | 5;
  /**
   * A dictionary containing a key that consists of the IETF BCP 47 identifier for a language (for example, en or jp) and a value consisting of the agreement localized to that language. The agreement is displayed in a dialog, and the user must agree before installing the profile.
   *
   * The dictionary can also contain an optional key, 'default', with its value consisting of the unlocalized (usually in en) agreement.
   *
   * The system chooses a localized version in the order of preference specified by the user (macOS) or based on the user's current language setting (iOS). If no exact match is found, the default localization is used. If there is no default localization, the en localization is used. If there is no en localization, the first available localization is used.
   *
   * Provide a default value, if possible. No warning is displayed if the user's locale doesn't match any localization in the 'ConsentText' dictionary.
   */
  ConsentText?: {
    /**
     * The dictionary containing a key that consists of the IETF BCP 47 identifier for a language (for example, en or jp) and a value that consists of the agreement localized to that language.
     */
    ConsentTextItem: {
      /**
       * The key consisting of the IETF BCP 47 identifier for a language (for example, en or jp) and the value consisting of the agreement localized to that language.
       */
      ANY: string;
    };
  };
}
