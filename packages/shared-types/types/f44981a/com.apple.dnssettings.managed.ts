/* eslint-disable */
/**
 * This file was automatically generated by mdm-docs-parser.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run mdm-docs-parser:generate to regenerate this file.
 */

/**
 * Use this section to configure DNS settings.
 */
export interface ComAppleDnsSettingsManaged {
  /**
   * A dictionary that defines a configuration for an encrypted DNS server.
   */
  DNSSettings: {
    /**
     * The encrypted transport protocol used to communicate with the DNS server.
     */
    DNSProtocol: "HTTPS" | "TLS";
    /**
     * The URI template of a DNS-over-HTTPS server, as defined in RFC 8484. This URL must use the 'https://' scheme, and the hostname or address in the URL will be used to validate the server certificate. If no 'ServerAddresses' are provided, the hostname or address in the URL will be used to determine the server addresses. This key must be present only if the 'DNSProtocol' is 'HTTPS'.
     */
    ServerURL?: string;
    /**
     * The hostname of a DNS-over-TLS server used to validate the server certificate, as defined in RFC 7858. If no 'ServerAddresses' are provided, the hostname will be used to determine the server addresses. This key must be present only if the DNSProtocol is 'TLS'.
     */
    ServerName?: string;
    /**
     * An unordered list of DNS server IP address strings. These IP addresses can be a mixture of IPv4 and IPv6 addresses.
     */
    ServerAddresses?: string[];
    /**
     * A list of domain strings used to determine which DNS queries will use the DNS server. If this array is not provided, all domains will use the DNS server.
     * A single wildcard '*' prefix is supported, but is not required. For example, both '*.example.com' and 'example.com' match against 'mydomain.example.com' and 'your.domain.example.com', but do not match against 'mydomain-example.com'.
     */
    SupplementalMatchDomains?: string[];
  };
  /**
   * An array of rules defining the DNS settings. If rules aren't present, the system always applies the DNS settings. These rules are identical to the 'OnDemandRules' array in VPN payloads.
   */
  OnDemandRules?: {
    /**
     * The action to take if this dictionary matches the current network. Possible values are:
     * * 'Connect': Apply DNS Settings when the dictionary matches.
     * * 'Disconnect': Do not apply DNS Settings when the dictionary matches.
     * * 'EvaluateConnection': Apply DNS Settings with per-domain exceptions when the dictionary matches.
     */
    Action: "Connect" | "Disconnect" | "EvaluateConnection";
    /**
     * A dictionary that provides per-connection rules.
     * This array is used only for settings where the 'Action' value is'EvaluateConnection'.
     */
    ActionParameters?: {
      /**
       * The domains for which this evaluation applies.
       */
      Domains: string[];
      /**
       * The DNS settings behavior for the specified domains. Allowed values are:
       * * 'NeverConnect': Do not use the DNS Settings for the specified domains.
       * * 'ConnectIfNeeded': Allow using the DNS Settings for the specified domains.
       */
      DomainAction: "NeverConnect" | "ConnectIfNeeded";
    };
    /**
     * An array of domain names. This rule matches if any of the domain names in the specified list matches any domain in the device's search domains list.
     * A single wildcard '*' prefix is supported, but is not required. For example, both '*.example.com' and 'example.com' match against 'mydomain.example.com' and 'your.domain.example.com', but do not match against 'mydomain-example.com'.
     */
    DNSDomainMatch?: string[];
    /**
     * An array of IP addresses. This rule matches if any of the network's specified DNS servers match any entry in the array.
     * Matching with a single wildcard is supported. For example, 17.* matches any DNS server in the 17.0.0.0/8 subnet.
     */
    DNSServerAddressMatch?: string[];
    /**
     * An interface type. If specified, this rule matches only if the primary network interface hardware matches the specified type.
     */
    InterfaceTypeMatch?: "Ethernet" | "WiFi" | "Cellular";
    /**
     * An array of SSIDs to match against the current network. If the network is not a Wi-Fi network or if the SSID does not appear in this array, the match fails.
     * Omit this key and the corresponding array to match against any SSID.
     */
    SSIDMatch?: string[];
    /**
     * A URL to probe. If this URL is successfully fetched (returning a 200 HTTP status code) without redirection, this rule matches.
     */
    URLStringProbe?: string;
  }[];
  /**
   * If 'true', prohibits users from disabling DNS settings. This key is only available on supervised devices.
   */
  ProhibitDisablement?: boolean;
  /**
   * The UUID that points to an identity certificate payload. The system uses this identity to authenticate the user to the DNS resolver.
   */
  PayloadCertificateUUID?: string;
}
