/* eslint-disable */
/**
 * This file was automatically generated by mdm-docs-parser.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run mdm-docs-parser:generate to regenerate this file.
 */

/**
 * Use this section to define settings for mobile device management.
 */
export interface ComAppleMdm {
  /**
   * The UUID of the certificate payload for the device's identity. It may also point to a SCEP payload.
   */
  IdentityCertificateUUID: string;
  /**
   * The topic that MDM listens to for push notifications. The certificate that the server uses to send push notifications must have the same topic in its subject. The topic must begin with the 'com.apple.mgmt.' prefix.
   */
  Topic: string;
  /**
   * The URL that the device contacts to retrieve device management instructions. The URL must begin with the 'https://' URL scheme, and may contain a port number (':1234', for example).
   */
  ServerURL: string;
  /**
   * The URL that the device should use to check in during installation. The URL must begin with the 'https://' URL scheme and may contain a port number (':1234', for example). If this URL isn't given, 'ServerURL' is used for both purposes.
   */
  CheckInURL?: string;
  /**
   * If 'true', each message coming from the device carries the additional 'Mdm-Signature' HTTP header.
   */
  SignMessage?: boolean;
  /**
   * Logical OR of the following bit flags:
   * '1': Allow inspection of installed configuration profiles.
   * '2': Allow installation and removal of configuration profiles.
   * '4': Allow device lock and passcode removal.
   * '8': Allow device erase.
   * '16': Allow query of device information (device capacity, serial number).
   * '32': Allow query of network information (phone/SIM numbers, MAC addresses).
   * '64': Allow inspection of installed provisioning profiles.
   * '128': Allow installation and removal of provisioning profiles.
   * '256': Allow inspection of installed applications.
   * '512': Allow restriction-related queries.
   * '1024': Allow security-related queries.
   * '2048': Allow manipulation of settings.
   * '4096': Allow app management.
   * The value can't be '0'. If '2' is specified, '1' must also be specified. If '128' is specified, '64' must also be specified.
   * If the 'ManagedAppleID' is included, then 'AccessRights' are ignored.
   */
  AccessRights?: number;
  /**
   * If 'true', the device uses the development APNS servers. Otherwise, the device uses the production servers.
   * Note that this property must be set to 'false' if your Apple Push Notification Service certificate was issued by the Apple Push Certificate Portal ('https://identity.apple.com/pushcert'). That portal only issues certificates for the production push environment.
   */
  UseDevelopmentAPNS?: boolean;
  /**
   * The Managed Apple ID of the user. Available in iOS 13.1 and later, and macOS 10.15 and later. This is only used with the profile-driven BYOD enrollment flow, and must not be present in the BYOD and ADDE account-driven enrollment flows. As of iOS 17 and macOS 14, profile-driven user enrollments are deprecated and will be removed in a future release.
   */
  ManagedAppleID?: string;
  /**
   * The Managed Apple ID pre-assigned to the authenticated user. This is required for the BYOD and ADDE account-driven enrollment flows, and must not be present in other enrollment flows. Available in iOS 15 and macOS 14, and later.
   */
  AssignedManagedAppleID?: string;
  /**
   * The enrollment mode the server indicates must be used when enrolling. This key must be present for BYOD and ADDE account-driven enrollments, and must not be present in the profile-driven user enrollment flow. Available in iOS 15 and macOS 14, and later.
   */
  EnrollmentMode?: "BYOD" | "ADDE";
  /**
   * An array of strings, each containing the UUID of a certificate to be used when evaluating trust to the '.../connect/' URLs of MDM servers.
   */
  ServerURLPinningCertificateUUIDs?: string[];
  /**
   * An array of strings, each containing the payload UUID of a certificate to be used when evaluating trust to the '.../checkin/' URLs of MDM servers.
   */
  CheckInURLPinningCertificateUUIDs?: string[];
  /**
   * If 'true', fails the connection attempt unless a verified positive response is obtained during certificate revocation checks.
   * If 'false', revocation checks are done on a best-attempt basis, where failure to reach the server isn't considered fatal.
   */
  PinningRevocationCheckRequired?: boolean;
  /**
   * A unique array of strings indicating server capabilities. If the server manages macOS devices or a Shared iPad, this field is mandatory and must contain the value 'com.apple.mdm.per-user-connections', which indicates that the server supports both device and user connections.
   * Starting with macOS 11, it is also recommended that macOS device enrollment profiles contain the value 'com.apple.mdm.bootstraptoken' to ensure the Bootstrap Token is created and escrowed with the MDM server at enrollment time.
   * If the server supports the "GetToken" CheckIn message type, then this key must be present and must include "com.apple.mdm.token" as one of its values.
   */
  ServerCapabilities?: (
    | "com.apple.mdm.per-user-connections"
    | "com.apple.mdm.bootstraptoken"
    | "com.apple.mdm.token"
  )[];
  /**
   * If 'true', the device attempts to send a CheckOut <https://developer.apple.com/library/archive/documentation/Miscellaneous/Reference/MobileDeviceManagementProtocolRef/2-MDM_Check_In_Protocol/MDM_Check_In_Protocol..html#//apple_ref/doc/uid/TP40017387-CH4-SW7> message to the 'CheckInURL' when the profile is removed.
   */
  CheckOutWhenRemoved?: boolean;
  /**
   * This property specifies an iTunes Store ID for an app the system can install with the InstallApplicationCommand, without any approval from the user. The MDM vendor or managing organization generally provides this app, which enhances the management experience for the user. The device shows the user details about this app in the account-driven enrollment process prior to installing the MDM profile. Use this property with account-driven MDM enrollments that normally require user approval for app installs through MDM.
   * Only account-driven user enrollments support this property and other enrollment types ignore it.
   * Available in iOS 15.1 and later.
   */
  RequiredAppIDForMDM?: number;
  /**
   * If 'true', warns the user that they need to reboot into RecoveryOS and allow the MDM to use the Bootstrap Token for authentication for certain sensitive operations such as enabling kernel extensions or installing some types of software updates. If the MDM doesn't need to perform these operations, it can leave this key set to 'false', and the user won't be notified.
   * The SettingsCommand.Command.Settings.MDMOptions.MDMOptions command overrides this default value.
   * This setting only applies to devices that have 'BootstrapTokenRequiredForSoftwareUpdate' or 'BootstrapTokenRequiredForKernelExtensionApproval' set to 'true' in their SecurityInfoResponse.SecurityInfo.
   * DEP-enrolled devices are automatically allowed to use the Bootstrap Token for authentication.
   * Available in macOS 11 and later.
   */
  PromptUserToAllowBootstrapTokenForAuthentication?: boolean;
}
