/* eslint-disable */
/**
 * This file was automatically generated by mdm-docs-parser.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run mdm-docs-parser:generate to regenerate this file.
 */

/**
 * Use this section to define Wi-Fi settings
 */
export interface ComAppleWifiManaged {
  /**
   * If 'true', the device joins the network automatically.
   * If 'false', the user must tap the network name to join it.
   * Available in iOS 5.0 and later, and in macOS 10.7 and later.
   */
  AutoJoin?: boolean;
  /**
   * The SSID of the Wi-Fi network to be used. In iOS 7.0 and later, the SSID is optional if a 'DomainName' value is provided.
   */
  SSID_STR?: string;
  /**
   * If 'true', defines this network as hidden.
   */
  HIDDEN_NETWORK?: boolean;
  /**
   * The proxy type, if any, to use. If you choose the manual proxy type, you need the proxy server address, including its port and optionally a user name and password into the proxy server. If you choose the auto proxy type, you can enter a proxy autoconfiguration (PAC) URL.
   * Available in iOS 5.0 and later, and on all versions of macOS.
   */
  ProxyType?: "None" | "Manual" | "Auto";
  /**
   * The encryption type for the network.
   * If set to anything except 'None', the payload may contain the following three keys: 'Password', 'PayloadCertificateUUID', or 'EAPClientConfiguration'.
   * As of iOS 16, tvOS 16, watchOS 9, and macOS 13:
   * * 'WPA' allows joining WPA or WPA2 networks
   * * 'WPA2' allows joining WPA2 or WPA3 networks
   * * 'WPA3' allows joining WPA3 networks only
   * * 'Any' allows joining WPA, WPA2, WPA3, and WEP networks.
   * Prior to iOS 16, tvOS 16, and watchOS 9, specifying 'WPA', 'WPA2', and 'WPA3' were equivalent and would allow joining any WPA network.
   * Prior to macOS 13, the encryption type, if specified explicitly, needed to match the encryption type of the network exactly.
   */
  EncryptionType?: "WEP" | "WPA" | "WPA2" | "WPA3" | "Any" | "None";
  /**
   * The password for the access point.
   */
  Password?: string;
  /**
   * The UUID of the certificate payload within the same profile to use for the client credential.
   */
  PayloadCertificateUUID?: string;
  /**
   * The enterprise network configuration.
   */
  EAPClientConfiguration?: {
    /**
     * The system accepts the following EAP types:
     * 13 = TLS
     * 17 = LEAP
     * 18 = EAP-SIM
     * 21 = TTLS
     * 23 = EAP-AKA
     * 25 = PEAP
     * 43 = EAP-FAST
     *
     * For EAP-TLS authentication without a network payload, install the necessary identity certificates and have your users select EAP-TLS mode in the 802.1X credentials dialog that appears when they connect to the network. For other EAP types, a network payload is necessary and must specify the correct settings for the network.
     */
    AcceptEAPTypes: (13 | 17 | 18 | 21 | 23 | 25 | 43)[];
    /**
     * The user name for the account. If you don't specify a value, the system prompts the user during login.
     */
    UserName?: string;
    /**
     * The user's password. If you don't specify a value, the system prompts the user during login.
     */
    UserPassword?: string;
    /**
     * An array of the UUID of a certificate payloads in the same profile to trust for authentication. Use this key to prevent the device from asking the user whether to trust the listed certificates. Dynamic trust (the certificate dialogue) is in a disabled state if you specify this property without also enabling 'TLSAllowTrustExceptions'.
     */
    PayloadCertificateAnchorUUID?: string[];
    /**
     * An array of trusted certificates. Each entry in the array must contain certificate data that represents an anchor certificate used for verifying the server certificate.
     */
    TLSTrustedCertificates?: string[];
    /**
     * The list of accepted server certificate common names. If a server presents a certificate that isn't in this list, the system doesn't trust it.
     * If you specify this property, the system disables dynamic trust (the certificate dialog) unless you also specify 'TLSAllowTrustExceptions' with the value 'true'.
     * If necessary, use wildcards to specify the name, such as 'wpa.*.example.com'.
     */
    TLSTrustedServerNames?: string[];
    /**
     * If 'true', allows a dynamic trust decision by the user. The dynamic trust is the certificate dialogue that appears when the system doesn't trust a certificate.
     * If 'false', the authentication fails if the system doesn't already trust the certificate.
     * As of iOS 8, Apple no longer supports this key.
     */
    TLSAllowTrustExceptions?: boolean;
    /**
     * If 'true', allows for two-factor authentication for EAP-TTLS, PEAP, or EAP-FAST. If 'false', allows for zero-factor authentication for EAP-TLS.
     * If you don't specify a value, the default is 'true' for EAP-TLS, and 'false' for other EAP types.
     */
    TLSCertificateIsRequired?: boolean;
    /**
     * The inner authentication that the TTLS module uses.
     */
    TTLSInnerAuthentication?: "PAP" | "EAP" | "CHAP" | "MSCHAP" | "MSCHAPv2";
    /**
     * The minimum TLS version for EAP authentication.
     */
    TLSMinimumVersion?: "1.0" | "1.1" | "1.2" | "1.3";
    /**
     * The maximum TLS version for EAP authentication.
     */
    TLSMaximumVersion?: "1.0" | "1.1" | "1.2" | "1.3";
    /**
     * A name that hides the user's true name. The user's actual name appears only inside the encrypted tunnel. For example, you might set this to anonymous or anon, or anon@mycompany.net. It can increase security because an attacker can't see the authenticating user's name in the clear.
     *
     * This key is only relevant to TTLS, PEAP, and EAP-FAST.
     */
    OuterIdentity?: string;
    /**
     * If 'true', the device uses an existing PAC if it's present. Otherwise, the server must present its identity using a certificate.
     */
    EAPFASTUsePAC?: boolean;
    /**
     * If 'true', allows PAC provisioning.
     *
     * This value is only applicable if 'EAPFASTUsePAC' is 'true'. This value must be 'true' for EAP-FAST PAC usage to succeed because there's no other way to provision a PAC.
     */
    EAPFASTProvisionPAC?: boolean;
    /**
     * If 'true', provisions the device anonymously. Note that there are known machine-in-the-middle attacks for anonymous provisioning.
     */
    EAPFASTProvisionPACAnonymously?: boolean;
    /**
     * The minimum number of RAND values to accept from the server.
     * For use with EAP-SIM only.
     */
    EAPSIMNumberOfRANDs?: 2 | 3;
    /**
     * Set this string to 'ActiveDirectory' to use the AD computer name and password credentials.
     * If using this property, you can't use 'SystemModeUseOpenDirectoryCredentials'.
     */
    SystemModeCredentialsSource?: string;
    /**
     * If 'true', the system mode connection tries to use the Open Directory credentials.
     * If using this property, you can't use 'SystemModeCredentialsSource'.
     */
    SystemModeUseOpenDirectoryCredentials?: boolean;
    /**
     * If 'true', the user receives a prompt for a password each time they connect to the network.
     */
    OneTimeUserPassword?: boolean;
  };
  /**
   * The operator name to display when connected to this network. Used only with Wi-Fi Hotspot 2.0 access points.
   * Available in iOS 7.0 and later, and in macOS 10.9 and later.
   */
  DisplayedOperatorName?: string;
  /**
   * The primary domain of the tunnel.
   * Available in iOS 7.0 and later, and in macOS 10.9 and later.
   */
  DomainName?: string;
  /**
   * An array of Roaming Consortium Organization Identifiers used for Wi-Fi Hotspot 2.0 negotiation.
   * Available in iOS 7.0 and later, and in macOS 10.9 and later.
   */
  RoamingConsortiumOIs?: string[];
  /**
   * If 'true', allows connection to roaming service providers.
   * Available in iOS 7.0 and later, and in macOS 10.9 and later.
   */
  ServiceProviderRoamingEnabled?: boolean;
  /**
   * If 'true', the device treats the network as a hotspot.
   * Available in iOS 7.0 and later, and in macOS 10.9 and later.
   */
  IsHotspot?: boolean;
  /**
   * The HESSID used for Wi-Fi Hotspot 2.0 negotiation.
   */
  HESSID?: string;
  /**
   * An array of Network Access Identifier Realm names used for Wi-Fi Hotspot 2.0 negotiation.
   * Available in iOS 7.0 and later, and in macOS 10.9 and later.
   */
  NAIRealmNames?: string[];
  /**
   * An array of Mobile Country Code/Mobile Network Code (MCC/MNC) pairs used for Wi-Fi Hotspot 2.0 negotiation. Each string must contain exactly six digits.
   * Available in iOS 7.0 and later. This feature is not supported in macOS.
   */
  MCCAndMNCs?: string[];
  /**
   * If 'true', Captive Network detection will be bypassed when the device connects to the network.
   * Available in iOS 10.0 and later.
   */
  CaptiveBypass?: boolean;
  /**
   * A dictionary that contains the list of apps that are allowed to benefit from L2 and L3 marking. When this dictionary isn't present, all apps are allowed to use L2 and L3 marking when the Wi-Fi network supports Cisco QoS fast lane.
   * Available in iOS 10.0 and later, and in macOS 10.13 and later.
   */
  QoSMarkingPolicy?: {
    /**
     * An array of app bundle identifiers that defines the allow list for L2 and L3 marking for traffic that goes to the Wi-Fi network. If the array isn't present, but the 'QoSMarkingPolicy' key is present — even empty — no apps can use L2 and L3 marking.
     */
    QoSMarkingAllowListAppIdentifiers?: string[];
    /**
     * Use 'QoSMarkingAllowListAppIdentifiers' instead.
     */
    QoSMarkingWhitelistedAppIdentifiers?: string[];
    /**
     * If 'true', adds audio and video traffic of built-in audio/video services, such as FaceTime and Wi-Fi Calling, to the allow list for L2 and L3 marking for traffic that goes to the Wi-Fi network.
     */
    QoSMarkingAppleAudioVideoCalls?: boolean;
    /**
     * If 'true', disables L3 marking and only uses L2 marking for traffic that goes to the Wi-Fi network.
     *
     * If 'false', the system behaves as if Wi-Fi doesn't have an association with a Cisco QoS fast lane network.
     */
    QoSMarkingEnabled?: boolean;
  };
  /**
   * An array of strings that contain the type of connection mode to be attached.
   */
  SetupModes?: ("System" | "Loginwindow")[];
  /**
   * If 'true', enables IPv6 on this interface.
   */
  EnableIPv6?: boolean;
  /**
   * If 'true', allows for two-factor authentication for EAP-TTLS, PEAP, or EAP-FAST.
   * If 'false', allows for zero-factor authentication for EAP-TLS.
   */
  TLSCertificateRequired?: boolean;
  /**
   * The proxy server's network address.
   */
  ProxyServer?: string;
  /**
   * The proxy server's port number.
   */
  ProxyServerPort?: number;
  /**
   * The user name used to authenticate to the proxy server.
   */
  ProxyUsername?: string;
  /**
   * The password used to authenticate to the proxy server.
   */
  ProxyPassword?: string;
  /**
   * The URL of the PAC file that defines the proxy configuration.
   */
  ProxyPACURL?: string;
  /**
   * If 'true', allows connecting directly to the destination if the PAC file is unreachable.
   */
  ProxyPACFallbackAllowed?: boolean;
  /**
   * If 'true,' disables MAC address randomization for a Wi-Fi network while associated with that network. This feature also shows a privacy warning in Settings indicating that the network has reduced privacy protections.
   * If 'false', then the system enables MAC address randomization.
   * This value is only locked when the profile is installed by MDM. If the profile is manually installed, the value is set but the user can change it.
   * Available in iOS 14 and later, and watchOS 7 and later.
   */
  DisableAssociationMACRandomization?: boolean;
}
