/* eslint-disable */
/**
 * This file was automatically generated by mdm-docs-parser.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run mdm-docs-parser:generate to regenerate this file.
 */

/**
 * Use this section to define settings for access to Email servers.
 */
export interface ComAppleMailManaged {
  /**
   * A user-visible description of the email account, shown in the Mail and Settings applications.
   */
  EmailAccountDescription?: string;
  /**
   * The full user name for the account. This name is shown in sent messages.
   */
  EmailAccountName?: string;
  /**
   * Defines the protocol to be used for the account.
   */
  EmailAccountType: "EmailTypeIMAP" | "EmailTypePOP";
  /**
   * The full email address for the account. If this string isn't present in the payload, the device prompts for this string during interactive profile installation in Settings or System Preferences.
   */
  EmailAddress?: string;
  /**
   * The authentication scheme for incoming mail.
   */
  IncomingMailServerAuthentication:
    | "EmailAuthNone"
    | "EmailAuthPassword"
    | "EmailAuthCRAMMD5"
    | "EmailAuthNTLM"
    | "EmailAuthHTTPMD5";
  /**
   * The incoming mail server host name.
   */
  IncomingMailServerHostName: string;
  /**
   * The incoming mail server port number. If no port number is specified, the default port for a given protocol is used.
   */
  IncomingMailServerPortNumber?: number;
  /**
   * If 'true', enables SSL for authentication on the incoming mail server.
   */
  IncomingMailServerUseSSL?: boolean;
  /**
   * The user name for the email account, usually the same as the email address up to the @ character. If the user name isn't present in the payload and the account is set up to require authentication for incoming email, the device prompts for this string during interactive profile installation in Settings or System Preferences.
   */
  IncomingMailServerUsername?: string;
  /**
   * The password for the incoming mail server. This password is used only with encrypted profiles.
   */
  IncomingPassword?: string;
  /**
   * The password for the outgoing mail server. This password is used only with encrypted profiles.
   */
  OutgoingPassword?: string;
  /**
   * If 'true', the user is prompted only once for the password, which is used for both outgoing and incoming mail.
   * This setting is only supported by interactive profile installations. Not supported by non-interactive installations (like MDM on iOS).
   */
  OutgoingPasswordSameAsIncomingPassword?: boolean;
  /**
   * The authentication scheme for outgoing mail.
   */
  OutgoingMailServerAuthentication:
    | "EmailAuthNone"
    | "EmailAuthPassword"
    | "EmailAuthCRAMMD5"
    | "EmailAuthNTLM"
    | "EmailAuthHTTPMD5";
  /**
   * The outgoing mail server host name.
   */
  OutgoingMailServerHostName: string;
  /**
   * The outgoing mail server port number. If no port number is specified, ports 25, 587, and 465 are used, in that order.
   */
  OutgoingMailServerPortNumber?: number;
  /**
   * If 'true', enables SSL authentication on the outgoing mail server.
   */
  OutgoingMailServerUseSSL?: boolean;
  /**
   * The user name for the email account, usually the same as the email address up to the @ character. If the user name isn't present in the payload and the account is set up to require authentication for outgoing email, the device prompts for this string during interactive profile installation in Settings or System Preferences.
   */
  OutgoingMailServerUsername?: string;
  /**
   * If 'true', prevents messages from being moved out of this email account and into another account. It also prevents forwarding or replying from an account other than one the message was sent to.
   */
  PreventMove?: boolean;
  /**
   * If 'true', prevents this account from sending mail in any app other than the Apple Mail app.
   */
  PreventAppSheet?: boolean;
  /**
   * If 'true', enables S/MIME encryption. In iOS 10.0 and later, this key is ignored.
   */
  SMIMEEnabled?: boolean;
  /**
   * If 'true', enables S/MIME signing for this account.
   */
  SMIMESigningEnabled?: boolean;
  /**
   * The payload UUID of the identity certificate used to sign messages sent from this account.
   */
  SMIMESigningCertificateUUID?: string;
  /**
   * If 'true', enables S/MIME encryption for this account.
   */
  SMIMEEncryptionEnabled?: boolean;
  /**
   * The UUID of the identity certificate used to decrypt messages sent to this account. The public certificate is attached to outgoing mail to allow encrypted mail to be sent to this user. When the user sends encrypted mail, the public certificate is used to encrypt the copy of the mail in their Sent mailbox.
   */
  SMIMEEncryptionCertificateUUID?: string;
  /**
   * If 'true', displays the per-message encryption switch in the Mail Compose UI.
   *
   * As of iOS 12.0, this key is deprecated. Use 'SMIMEEnableEncryptionPerMessageSwitch' instead.
   */
  SMIMEEnablePerMessageSwitch?: boolean;
  /**
   * If 'true', excludes this account from Recent Addresses syncing.
   */
  disableMailRecentsSyncing?: boolean;
  /**
   * If 'true', enables this account to use Mail Drop.
   */
  allowMailDrop?: boolean;
  /**
   * The path prefix for the IMAP mail server.
   */
  IncomingMailServerIMAPPathPrefix?: string;
  /**
   * If 'true', the user can turn S/MIME signing on or off in Settings.
   */
  SMIMESigningUserOverrideable?: boolean;
  /**
   * If 'true', the user can select the signing identity.
   */
  SMIMESigningCertificateUUIDUserOverrideable?: boolean;
  /**
   * If 'true', enables S/MIME encryption by default.
   */
  SMIMEEncryptByDefault?: boolean;
  /**
   * If 'true', the user can turn encryption by default on/off, and encryption is on.
   */
  SMIMEEncryptByDefaultUserOverrideable?: boolean;
  /**
   * If 'true', the user can select the S/MIME encryption identity, and encryption is on.
   */
  SMIMEEncryptionCertificateUUIDUserOverrideable?: boolean;
  /**
   * If 'true', displays the per-message encryption switch in the Mail Compose UI.
   */
  SMIMEEnableEncryptionPerMessageSwitch?: boolean;
  /**
   * The VPNUUID of the per-app VPN the account uses for network communication.
   * Available in iOS 14 and later.
   */
  VPNUUID?: string;
}
