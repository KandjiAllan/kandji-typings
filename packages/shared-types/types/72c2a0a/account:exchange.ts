/* eslint-disable */
/**
 * This file was automatically generated by mdm-docs-parser.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run mdm-docs-parser:generate to regenerate this file.
 */

/**
 * Use this configuration to define settings for access to Exchange ActiveSync and Web Services servers.
 */
export interface AccountExchange {
  /**
   * The name that apps show to the user for this Exchange account. If not present, the system generates a suitable default.
   */
  VisibleName?: string;
  /**
   * The set of protocol types to enable on the Exchange server, in order of preference. This is an array of unique strings with possible values:
   * * 'EAS:' Exchange ActiveSync
   * * 'EWS:' Exchange Web Services (EWS)
   * If the device supports one or more of the listed protocol types, it sets up an account for the first supported type.
   * If the device doesn't support any of the listed protocol types, it doesn't set up an account and the system reports an error.
   */
  EnabledProtocolTypes: ("EAS" | "EWS")[];
  /**
   * The identifier of an asset declaration that contains the user identity for this account. The corresponding asset must be of type 'UserIdentity'.
   */
  UserIdentityAssetReference?: string;
  /**
   * The hostname of the EWS server (or IP address). This is a required field unless the declaration contains an 'OAuth' property, with a 'SignInURL' that has 'enabled' as 'true'.
   */
  HostName?: string;
  /**
   * The port number of the EWS server. The system uses this only when this declaration has a 'HostName' value.
   */
  Port?: number;
  /**
   * The path of the EWS server. The system uses this only when this declaration has a 'HostName' value.
   */
  Path?: string;
  /**
   * The external hostname of the EWS server (or IP address). This is a required field unless the declaration contains an 'OAuth' property, with a 'SignInURL' that has 'enabled' as 'true'.
   */
  ExternalHostName?: string;
  /**
   * The external port number of the EWS server. The system uses this only when this declaration has a 'HostName' value.
   */
  ExternalPort?: number;
  /**
   * The external path of the EWS server. The system uses this only when this declaration has a 'HostName' value.
   */
  "External Path"?: string;
  /**
   * The configuration settings for OAuth for this account.
   */
  OAuth?: {
    /**
     * If 'true', enables OAuth for this account.
     */
    Enabled: boolean;
    /**
     * The URL that this account uses for signing in with OAuth. The system ignores this value unless 'Enabled' is 'true'. The system doesn't use autodiscovery when a declaration contains this URL, so the declaration must also contain a 'HostName'.
     */
    SignInURL?: string;
    /**
     * The URL that this account uses for token requests with OAuth. The system ignores this value unless 'Enabled' is 'true'.
     */
    TokenRequestURL?: string;
  };
  /**
   * The identifier of an asset declaration that contains the credentials for this account to authenticate with an Exchange server. Set the corresponding asset type to 'CredentialUserNameAndPassword'.
   */
  AuthenticationCredentialsAssetReference?: string;
  /**
   * Specifies the identifier of a credential asset declaration that contains the identity that this account requires to authenticate with the Exchange server.
   */
  AuthenticationIdentityAssetReference?: string;
  /**
   * Settings for S/MIME.
   */
  SMIME?: {
    /**
     * Settings for S/MIME signing.
     */
    Signing?: {
      /**
       * If 'true', the system enables S/MIME signing.
       */
      Enabled: boolean;
      /**
       * Specifies the identifier of an asset declaration containing the identity required for S/MIME signing of messages sent from this account.
       */
      IdentityAssetReference?: string;
      /**
       * If 'true', the user can turn S/MIME signing on or off in Settings.
       */
      UserOverrideable?: boolean;
      /**
       * If 'true', the user can select an S/MIME signing identity in Settings.
       */
      IdentityUserOverrideable?: boolean;
    };
    /**
     * Settings for S/MIME encryption.
     */
    Encryption?: {
      /**
       * If 'true', the system enables S/MIME encryption by default, which the user can't override if 'PerMessageSwitchEnabled' is 'false'.
       */
      Enabled: boolean;
      /**
       * Specifies the identifier of an asset declaration containing the identity required for S/MIME encryption. The system attaches the public certificate to outgoing mail to allow the user to receive encrypted mail. When the user sends encrypted mail, the system uses the public certificate to encrypt the copy of the mail in their Sent mailbox.
       */
      IdentityAssetReference?: string;
      /**
       * If 'true', the user can turn S/MIME encryption by default on or off in Settings.
       */
      UserOverrideable?: boolean;
      /**
       * If 'true', the user can select an S/MIME signing identity in Settings.
       */
      IdentityUserOverrideable?: boolean;
      /**
       * If 'true', the system enables the per-message encryption switch in the compose view.
       */
      PerMessageSwitchEnabled?: boolean;
    };
  };
  /**
   * If 'true', activates the mail service for this account.
   */
  MailServiceActive?: boolean;
  /**
   * If 'true', prevents the user from changing the status of the mail service for this account.
   */
  LockMailService?: boolean;
  /**
   * If 'true', activates the address book service for this account.
   */
  ContactsServiceActive?: boolean;
  /**
   * If 'true', prevents the user from changing the status of the address book service for this account.
   */
  LockContactsService?: boolean;
  /**
   * If 'true', activates the calendar service for this account.
   */
  CalendarServiceActive?: boolean;
  /**
   * If 'true', prevents the user from changing the status of the calendar service for this account.
   */
  LockCalendarService?: boolean;
  /**
   * If 'true', activates the reminders service for this account.
   */
  RemindersServiceActive?: boolean;
  /**
   * If 'true', prevents the user from changing the status of the reminders service for this account.
   */
  LockRemindersService?: boolean;
  /**
   * If 'true', activates the notes service for this account.
   */
  NotesServiceActive?: boolean;
  /**
   * If 'true', prevents the user from changing the status of the notes service for this account.
   */
  LockNotesService?: boolean;
}
